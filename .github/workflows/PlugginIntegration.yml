name: Filter Widgets and Cleanup

on:
  push:
    branches:
      - '**'

jobs:
  filter-widgets:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Git user
      - name: Configure Git
        run: |
          git config --global user.email "ajayprince2003@gmail.com"
          git config --global user.name "Ganapathi-AJ"

      # Step 3: Create a new branch using the app name
      - name: Create new branch
        run: |
          # Extract the first line of the commit message for the branch name
          branch_name=$(echo "${{ github.event.head_commit.message }}" | head -n 1 | tr -d ',')
          echo "Branch name: $branch_name"
          git checkout -b "$branch_name"

      # # Step 4: Extract directories to keep from the commit message
      # - name: Extract widgets to keep
      #   id: extract_widgets
      #   run: |
      #     # Extract lines after the first line as directories to keep
      #     echo "${{ github.event.head_commit.message }}" | tail -n +2 | tr ',' '\n' | awk '{$1=$1;print}' > directories_to_keep.txt
      #     echo "Directories to keep:"
      #     cat directories_to_keep.txt

      # Step 5: Remove unnecessary directories
      # - name: Remove unwanted directories
      #   run: | 
      #     # Read directories to keep
      #     keep_dirs=$(cat directories_to_keep.txt | tr '\n' ' ')
      #     echo "Keeping these directories: $keep_dirs"

      #     # List all directories in `lib`
      #     all_dirs=$(ls lib)
      #     echo "All directories in lib: $all_dirs"

      #     # Remove directories not in the keep list
      #     for dir in $all_dirs; do
      #       if [[ ! " $keep_dirs " =~ " $dir " ]]; then
      #         echo "Removing directory: lib/$dir"
      #         rm -rf "lib/$dir"
      #       fi
      #     done

      # Step 3: Extract directories to remove from the commit message
      - name: Extract widgets to remove
        id: extract_widgets
        run: |
          # Extract all lines from the commit message as directories to remove
          echo "${{ github.event.head_commit.message }}" | tr ',' '\n' | awk '{$1=$1;print}' > directories_to_remove.txt
          echo "Directories to remove:"
          cat directories_to_remove.txt

      # Step 4: Remove specified directories
      - name: Remove specified directories
        run: |
          # Read directories to remove from the file
          remove_dirs=$(cat directories_to_remove.txt)
          echo "Removing these directories: $remove_dirs"

          # Remove only the specified directories from `lib`
          for dir in $remove_dirs; do
            if [ -d "lib/$dir" ]; then
              echo "Removing directory: lib/$dir"
              rm -rf "lib/$dir"
            else
              echo "Directory not found: lib/$dir"
            fi
          done

      # Step 6: Cleanup imports in main.dart
      - name: Cleanup imports in main.dart
        run: |
          # Read directories to keep
          keep_dirs=$(cat directories_to_keep.txt | tr '\n' ' ')
          echo "Cleaning imports for removed directories."

          # Modify main.dart to remove imports for removed directories
          for dir in $(ls lib); do
            if [[ ! " $keep_dirs " =~ " $dir " ]]; then
              echo "Removing imports for: $dir"
              sed -i "/import 'package:.*$dir.*/d" lib/main.dart
            fi
          done

      # Step 7: Commit the changes
      - name: Commit changes
        run: |
          git config --global user.name "Ganapathi-AJ"
          git config --global user.email "ajayprince2003@gmail.com"
          git add .
          git commit -m "Cleaned up directories and imports based on commit message"
          git push --set-upstream origin ${{ github.head_ref || github.ref_name }}
